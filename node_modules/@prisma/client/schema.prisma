// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
  output        = "../../node_modules/@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id                    String         @id @default(cuid())
  name                  String
  subdomain             String?        @unique
  branche               String
  description           String
  locations             Location[]
  phone                 String?
  email                 String?
  updatedAt             DateTime       @updatedAt
  createdAt             DateTime       @default(now())
  User                  User[]
  // Subscription fields
  stripeCustomerId      String?        @unique
  hasActiveSubscription Boolean        @default(false)
  subscriptions         Subscription[]

  OrganizationSettings OrganizationSettings?
}

// Subscription model
model Subscription {
  id                   String       @id @default(cuid())
  organizationId       String
  organization         Organization @relation(fields: [organizationId], references: [id])
  stripeSubscriptionId String       @unique
  status               String // 'active', 'canceled', 'past_due', etc.
  priceId              String
  planName             String
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean      @default(false)
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
}

// Model for storing subscription products/plans
model SubscriptionPlan {
  id            String   @id @default(cuid())
  stripePriceId String   @unique
  name          String
  description   String
  price         Float
  interval      String // 'month', 'year'
  active        Boolean  @default(true)
  features      String // JSON string of features
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Location {
  id             String       @id @default(cuid())
  name           String
  address        String
  postalCode     String?
  country        String?
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  facilities     Facility[]
  classes        Class[]
  bookings       Booking[]
  updatedAt      DateTime     @updatedAt
  createdAt      DateTime     @default(now())

  LocationSettings LocationSettings?
}

model Facility {
  id               String            @id @default(cuid())
  name             String
  description      String
  price            Float
  locationId       String
  location         Location          @relation(fields: [locationId], references: [id])
  bookings         Booking[]
  features         Feature[]
  classes          Class[]
  type             FacilityType      @default(PRIVATE)
  updatedAt        DateTime          @updatedAt
  createdAt        DateTime          @default(now())
  FacilitySettings FacilitySettings?
}

model Class {
  id            String         @id @default(cuid()) //TODO: this is the id of the classsession
  name          String
  description   String
  instructor    String
  locationId    String
  location      Location       @relation(fields: [locationId], references: [id])
  facilityId    String?
  facility      Facility?      @relation(fields: [facilityId], references: [id])
  updatedAt     DateTime       @updatedAt
  createdAt     DateTime       @default(now())
  ClassSettings ClassSettings?
  classSessions ClassSession[]
}

model ClassSession {
  id                   String                @id @default(cuid())
  classId              String
  class                Class                 @relation(fields: [classId], references: [id])
  bookings             Booking[]
  startTime            DateTime
  endTime              DateTime
  updatedAt            DateTime              @updatedAt
  createdAt            DateTime              @default(now())
  ClassSessionSettings ClassSessionSettings?
}

enum FacilityType {
  PRIVATE
  PUBLIC
  CLASSES
}

model OrganizationSettings {
  id             String       @id @default(cuid())
  organizationId String       @unique
  organization   Organization @relation(fields: [organizationId], references: [id])
  data           Json //settingspayload
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model LocationSettings {
  id         String   @id @default(cuid())
  locationId String   @unique
  location   Location @relation(fields: [locationId], references: [id])
  data       Json //settingspayload
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model FacilitySettings {
  id         String   @id @default(cuid())
  facilityId String   @unique
  facility   Facility @relation(fields: [facilityId], references: [id])
  data       Json //settingspayload
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ClassSettings {
  id        String   @id @default(cuid())
  classId   String   @unique
  class     Class    @relation(fields: [classId], references: [id])
  data      Json //settingspayload
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ClassSessionSettings {
  id             String       @id @default(cuid())
  classSessionId String       @unique
  classSession   ClassSession @relation(fields: [classSessionId], references: [id])
  data           Json //settingspayload
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

enum SettingScope {
  ORGANIZATION
  LOCATION
  FACILITY
  CLASS
}

model Feature {
  id         String     @id @default(cuid())
  name       String // Naam van het kenmerk (bijv. "Tennis", "Indoor")
  category   String // Categorie van het kenmerk (sport, surface, indoor, amenities)
  facilities Facility[] // Faciliteiten die dit kenmerk hebben
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Booking {
  id             String        @id @default(cuid())
  startTime      DateTime
  endTime        DateTime
  userId         String?
  user           User?         @relation(fields: [userId], references: [id])
  facilityId     String?
  facility       Facility?     @relation(fields: [facilityId], references: [id])
  locationId     String
  location       Location      @relation(fields: [locationId], references: [id])
  classSessionId String?
  classSession   ClassSession? @relation(fields: [classSessionId], references: [id])
  status         String        @default("PENDING") // PENDING, CONFIRMED, CANCELLED
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  customerEmail  String?
  customerName   String?
  customerPhone  String?
  notes          String?
  personCount    Int?
  emailSent      Boolean       @default(false)
  type           BookingType   @default(NORMAL)
}

enum BookingType {
  NORMAL //normal bookings like tennis court or pool
  CLASSES // this bookings are not real bookings but are used to block timeslots for classes
  CLASS_SESSION // this bookings are real bookings for a class session
}

//REGION USER AUTHENTICATION and AUTHORIZATION

model User {
  id                          String          @id @default(cuid())
  name                        String?
  email                       String?         @unique
  password                    String?
  emailVerified               DateTime?
  image                       String?
  role                        String?         @default("CLIENT")
  accounts                    Account[]
  sessions                    Session[]
  authenticators              Authenticator[]
  bookings                    Booking[]
  // Subscription-related fields
  lastActiveSubscriptionCheck DateTime?
  active                      Boolean         @default(false)
  createdAt                   DateTime        @default(now())
  updatedAt                   DateTime        @updatedAt
  organizationId              String?
  organization                Organization?   @relation(fields: [organizationId], references: [id])
  activateToken               ActivateToken[]
}

model ActivateToken {
  id          Int       @id @default(autoincrement())
  token       String    @unique
  activatedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
